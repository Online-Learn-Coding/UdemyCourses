server.port=8082
spring.application.name=api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

# this allows the automatic routing 
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Below is the part of the manual routing --> both automatic and manual could be used in tandem
#######################
# ROUTING OF REQEUSTS #
#######################

spring.cloud.gateway.routes[0].id=users-status-check

#it can be a name witht which the microservice is registered or the hostname or the api address   - hardcoding of port would notbe done here
#lb:// --> this is used to allow the microservice to be searched through the eureka server that's registered with it. Just give the name of the MS registered with eureka server
spring.cloud.gateway.routes[0].uri=lb://user-api      

#giving visibility to the below uri of the above MS
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check 	

#can also include other methods as below --> GET,POST,DELETE
spring.cloud.gateway.routes[0].predicates[1]=Method=GET

#For validating the specific Header with Bearer ... value  only for the above URL 
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer(.*)

#applying filters here    --> RemoveRequestHeader this is the inbuilt filter and similarly we can make the custom filters too.
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[0].filters[1]=RewritePath=/user-api/(?<segment>.*), /$\{segment}
#below is being assigned only to this particular route
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

#AuthorizationHeaderFilter related predicate and filter had been commented as causing error in server startup

#Routes being created for other purposes for UsersAPI_onEureka -- AuthorizationHeaderFilter -- Creating a user -- so no need to add HeaderFilter
spring.cloud.gateway.routes[2].id=user-api
spring.cloud.gateway.routes[2].uri=lb://user-api
spring.cloud.gateway.routes[2].predicates[0]=Path=/user-api/users
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/user-api/(?<segment>.*), /$\{segment}

#Routes for login uri 
spring.cloud.gateway.routes[3].id=users-api-login
spring.cloud.gateway.routes[3].uri=lb://user-api
spring.cloud.gateway.routes[3].predicates[0]=Path=/user-api/users/login
spring.cloud.gateway.routes[3].predicates[1]=Method=POST
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/user-api/(?<segment>.*), /$\{segment}

#Routes for update/delete
spring.cloud.gateway.routes[4].id=users-api-get-update-delete
spring.cloud.gateway.routes[4].uri=lb://user-api
spring.cloud.gateway.routes[4].predicates[0]=Path=/user-api/users/**
spring.cloud.gateway.routes[4].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[4].predicates[2]=Header=Authorization, Bearer(.*)
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/user-api/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[4].filters[2]=AuthorizationHeaderFilter

#for jwt token signing key validation part 
token.secret=dfa34qq3hh3h4232569ohgfrjf999
########################
# Routing for AcctManagement Project
########################

spring.cloud.gateway.routes[1].id=account-manager
spring.cloud.gateway.routes[1].uri=lb://account-ws

## commenting coz of the rewriting url statement
#spring.cloud.gateway.routes[1].predicates[0]=Path=/account/status/check

spring.cloud.gateway.routes[1].predicates[0]=Path=/account-ws/account/status/check
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie

# it's takingt the external uri and then the internal uri of the api class    --> the below can also be written using the regex
#spring.cloud.gateway.routes[1].filters[1]=RewritePath=/account-ws/account/status/check, /account/status/check

#using regex   --> first one is regex paramter and the second one is the replacement parameter 
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/account-ws/(?<segment>.*), /$\{segment}
####################################################################################################################################
#########################
# DOCUMENTATION         #
#########################


##############
#   AFTER    #

#The After route predicate factory takes one parameter, a datetime (which is a java ZonedDateTime). This predicate matches requests that happen after the specified datetime. 
#The following example configures an after route predicate:
#
#spring.cloud.gateway.routes[0].id = after_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = After=2017-01-20T17:42:47.789-07:00[America/Denver]

##############
#   BEFORE   #

#The Before route predicate factory takes one parameter, a datetime (which is a java ZonedDateTime). This predicate matches requests that happen before the specified datetime. The following example configures a before route predicate:
#
#spring.cloud.gateway.routes[0].id = before_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Before=2017-01-20T17:42:47.789-07:00[America/Denver]

##############
#   BETWEEN  #

#The Between route predicate factory takes two parameters, datetime1 and datetime2 which are java ZonedDateTimeobjects. This predicate matches requests that happen after datetime1 and before datetime2. The datetime2 parameter must be after datetime1. The following example configures a between route predicate:
#
#spring.cloud.gateway.routes[0].id = between_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]

##############
#   COOKIE   #

#The Cookie route predicate factory takes two parameters, the cookie name and a regexp (which is a Java regular expression). This predicate matches cookies that have the given name and whose values match the regular expression. The following example configures a cookie route predicate factory:
#
#spring.cloud.gateway.routes[0].id = cookie_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Cookie=chocolate, ch.p


##############
#   HEADER   #

#The Header route predicate factory takes two parameters, the header name and a regexp (which is a Java regular expression). This predicate matches with a header that has the given name whose value matches the regular expression. The following example configures a header route predicate:
#
#spring.cloud.gateway.routes[0].id = header_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Header=X-Request-Id, \d+

##############
#   HOST   #

#The Host route predicate factory takes one parameter: a list of host name patterns. The pattern is an Ant-style pattern with . as the separator. This predicates matches the Host header that matches the pattern. The following example configures a host route predicate:
#
#spring.cloud.gateway.routes[0].id = host_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Host=**.somehost.org,**.anotherhost.org

#URI template variables (such as {sub}.myhost.org) are supported as well.
##This route matches if the request has a Host header with a value of www.somehost.org or beta.somehost.org or www.anotherhost.org.
##This predicate extracts the URI template variables (such as sub, defined in the preceding example) as a map of names and values and places it in the ServerWebExchange.getAttributes() with a key defined in ServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE. Those values are then available for use by GatewayFilterfactories

##############
#   METHOD   #

#The Method Route Predicate Factory takes a methods argument which is one or more parameters: the HTTP methods to match. The following example configures a method route predicate:
#
#spring.cloud.gateway.routes[0].id = method_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Method=GET,POST

##############
#   PATH  #

#The Path Route Predicate Factory takes two parameters: a list of Spring PathMatcher patterns and an optional flag called matchOptionalTrailingSeparator. The following example configures a path route predicate:
#
#spring.cloud.gateway.routes[0].id = path_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Path=/red/{segment},/blue/{segment}

#This route matches if the request path was, for example: /red/1 or /red/blue or /blue/green.
##This predicate extracts the URI template variables (such as segment, defined in the preceding example) as a map of names and values and places it in the ServerWebExchange.getAttributes() with a key defined in ServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE. Those values are then available for use by GatewayFilterfactories

##############
#   QUERY    #

#The Query route predicate factory takes two parameters: a required param and an optional regexp (which is a Java regular expression). The following example configures a query route predicate:
#
#spring.cloud.gateway.routes[0].id = query_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Query=green
#The preceding route matches if the request contained a green query parameter.

##############
#   REMOTEADDR    #

#The RemoteAddr route predicate factory takes a list (min size 1) of sources, which are CIDR-notation (IPv4 or IPv6) strings, such as 192.168.0.1/16 (where 192.168.0.1 is an IP address and 16 is a subnet mask). The following example configures a RemoteAddr route predicate:
#
#spring.cloud.gateway.routes[0].id = remoteaddress_route
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = RemoteAddr=192.168.1.1/24

##############
#   WEIGHT    #

#The Weight route predicate factory takes two arguments: group and weight (an int). The weights are calculated per group. The following example configures a weight route predicate:
#
#spring.cloud.gateway.routes[0].id = weight_high
#spring.cloud.gateway.routes[0].uri = https://example.org
#spring.cloud.gateway.routes[0].predicates[0] = Weight=group1, 8
# 
#spring.cloud.gateway.routes[1].id = weight_low
#spring.cloud.gateway.routes[1].uri = https://example.org
#spring.cloud.gateway.routes[1].predicates[0] = Weight=group1, 2
#This route would forward ~80% of traffic to weighthigh.org and ~20% of traffic to weighlow.org
